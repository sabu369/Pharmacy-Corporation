# -*- coding: utf-8 -*-
"""AssignmentFinal.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1et5XhjfWF3WDZraGFIp87uL6QNj3mT04

#Pharmacy Coporation

This code simulates a pharmacy organization, where multiple pharmacies manage their inventory, serve patients, and track sales. It generates weekly sales data for the entire year, storing this data in CSV files for each week. The code also compiles all the weekly data into a single DataFrame for comprehensive analysis.

# Import necessary libraries
"""

import pandas as pd
import random
from datetime import datetime
from datetime import timedelta
import altair as alt

"""# Class: Purchase
This class is used to keep track of the total purchase amount for a given pharmacy. It has methods to increment the total by a given price and to return the total as a string.
"""

#Define a class for purchase of a drug
class Purchase:
  #Initialize a sale with total amount
  def __init__(self):
    self.total = 0

  #Increment the total amount by a given price
  def increment(self, price):
    self.total += price
    self.total = round(self.total, 2)

  #Return the total amount of the sale
  def __str__(self):
      return "Sale: $" + str(self.total)

drugs = ['Ibuprofen', 'Tylenol', 'Naproxen', 'Excedrin', 'Aspirin', 'Sumatriptan', 'Rizatriptan']
quantities = ['10', '30', '60', '100']

"""# Class: Inventory
This class represents the inventory of a pharmacy. It initializes with a random number of medication bottles, each with a random drug, quantity, and price. It provides a method to display the inventory.

"""

#Define the Pharmacy Inventory class
class Inventory:
  def __init__(self):
      self.bottles = []

      num_bottles = random.randint(10, 20) #Generate a random number of products between 10 and 20

      for i in range(num_bottles):
          drug = random.choice(drugs) #Pick a drug
          quantity = random.choice(quantities) #Pick a size
          #price = round(random.uniform(5, 100), 2)#Random price between $5 and $100 within 2 digits
          bottle = Medication(drug, quantity)#Make a bottle with your values
          self.bottles.append(bottle) #Add the bottle to your inventory

  #Display all bottles in the inventory
  def display_order(self):
    result = ""
    for bottle in self.bottles:
      result += str(bottle) + "\n"
    return result

"""#  Class: Medication
This class represents a medication with attributes for the drug name, quantity, and price. It provides a method to return these attributes as a string.
"""

#My corporation is big pharmaceutical company and my stores are medical offices.
#Each medical office need order different medication and different quantity
#Define a class for medication
class Medication:
  #Initial the class with two attributes: drug, and quantity
    def __init__(self, drug, quantity):
      self.price = round(random.uniform(1,10), 2) #New price
      self.drug = random.choice(drugs)
      self.quantity = random.choice(quantities)

    #Return the drug, and quantity of the medication
    def __str__(self):
        return f'Drug: {self.drug}, Quantity: {self.quantity}'

"""#  Class: Pharmacy
This class represents a pharmacy. It initializes with a name, an inventory, a list of patients, and a purchase object. It provides methods to add patients, run the simulation (where patients shop and purchase medications),and reset the total sales.

"""

#Define a class for the pharmacy
class Pharmacy:
  #Initialize a pharmacy with a name, an inventory, a list of patients and a purchase object
  def __init__(self, name):
    self.name= name
    self.inventory = Inventory ()
    self.patients = []

    #New: buy things and add their number
    self.purchase = Purchase()

  #Add a patinet to the pharmacy
  def add_patient(self, patient):
      self.patients.append(patient)

  #Get the list of patients
  def getPatients(self):
      for patient in self.patients:
        print("Patient " + patient.getName() + " is currently shopping")

  #Run the simulation for the pharmacy
  def run(self):
      print("Welcome to " + self.name + "!")
      print("This is our inventory: " + "\n" + self.inventory.display_order())
      print("We have " + str(len(self.patients)) + " patients today.")

      for patient in self.patients: #Iterate over the patients
        print("Patient " + patient.name + " is shopping.")
        #Take one item from the inventory and add it to the patient's basket
        item = random.choice(self.inventory.bottles)
        patient.add_to_order(item)
        print("Patient " + patient.name + " added " + str(item) + " to their order.")

        #New: Create the ability to purchase things, and add that to a total
        self.purchase.increment(item.price) #Increment the sale object with the price of the item
        print("Patient " + patient.name + " checked out and paid $" + str(item.price) + ".")

      print("The total sales for " + self.name + " today is $" + str(self.purchase.total) + "." + "\n")

  #Return the name and the sale object of the pharmacy
  def __str__(self):
      return self.name + " (Sales: $" + str(self.purchase.total) + ")"

  #Reset the total sales for a pharmacy
  def reset_total_sales(self):
    self.purchase.total = 0

"""#  Class: Patient
This class represents a patient. It initializes with a name and an order.  It provides methods to add a medication to the patient's order and to return the patient's information as a string.
"""

#define class for patient
class Patient:

  #Initialize a patient with a name and an order
  def __init__(self, name):
    self.name = name
    self.order = Order ()

  #Get the name of the patient
  def getName(self):
        return self.name

  #Add a drug to the patient's order
  def add_to_order(self, drug):
      self.order.add(drug)

  #Return the name and the order of the patient
  def __str__(self):
      return self.name + " (" + str(self.order) + ")"

names = ["Kasey", "Cory", "William", "Jeff", "Lisa", "Hana", "Amy", "Beth", "Tyler", "Miki"]

"""#  Class: Order
This class represents an order made by a patient. It initializes with an empty list of drugs. It provides methods to add a drug to the order and to return the list of drugs in the order as a string.
"""

#Define a class for an order
class Order: #Slight variation on the store idea, where you might do a "order"

    #Initialize an order with a list of drugs
    def __init__(self):
      self.drugs = []

    #Add a drug to the order
    def add(self, drug):
      self.drugs.append(drug)

    #Return the list of drugs in the order
    def __str__(self):
      result = "Order:\n"
      for drug in self.drugs:
          result += str(drug) + "\n"
      return result

"""#  Class: Analytics
This class is used to store and manage analytics data for the pharmacies. It provides methods to add analytics data and to create a CSV file from the analytics data.
"""

#Define a class for analytics
class Analytics:
  def __init__(self):
    self.pharmacy_analytics = []

  #Add analytics data
  def add_analytics(self, analytics):
    self.pharmacy_analytics = analytics

  #Create a CSV file from the analytics data
  def make_csv(self):
    df = pd.DataFrame(self.pharmacy_analytics)
    print(df)
    entitle = week_date #title for the file we will build from it
    df.to_csv(entitle + ".csv", index=False)

"""#  Class: Organization
This class represents the organization that owns multiple pharmacies. It initializes with a name and an empty list of pharmacies. It provides methods to add pharmacies, simulate the sales process for all pharmacies, display analytics data, and reset all pharmacy sales.
"""

#Define a class for an organization
class Organization:

  #Initialize an organization with a name and a list of pharmacies
  def __init__(self, name):
    self.name = name
    self.pharmacies = []
    self.analytics = [] #new

  #Add a pharmacy to the organization
  def add_pharmacy(self, pharmacy):
      self.pharmacies.append(pharmacy)

  #Run the simulation for the organization
  def simulate (self):
      total_sales = 0
      print("Welcome to " + self.name + "!")
      print("We have " + str(len(self.pharmacies)) + " pharmacies in our corporation." + "\n")
      #Iterate over the pharmacies
      for pharmacy in self.pharmacies: #Iterate over the pharmacies

        pharmacy.run() #Run the simulaton for each pharmacy
        total_sales += pharmacy.purchase.total #Add each phamacy's total sales to the organization total

        #Add analytics data
        dict_A = {"Name":pharmacy.name, "total_sales":pharmacy.purchase.total}
        self.analytics.append(dict_A)

      print("The total sales for " + self.name + " today is $" + str(total_sales) + ".")

  #Get the analytics data
  def get_analytics(self):
      return self.analytics

  #Display the analytics data
  def display_analytics(self):
      for i in self.analytics:
        print(i )

  #Return the name and the list of pharmacies in the organization
  def __str__(self):
      result = self.name + ":\n"
      for pharmacy in self.pharmacies:
          result += str(pharmacy) + "\n"
      return result

  #Reset sales of all pharmacies in the organization
  def reset_all_pharmacy_sales(self):
    for pharmacy in self.pharmacies:
        pharmacy.reset_total_sales()

"""#  Simulation
The following section sets up the organization and pharmacies, adds patients to each pharmacy, and runs a simulation to generate weekly sales data for each week of the year 2024. The data is stored in weekly CSV files and then compiled into a single DataFrame for analysis.
"""

#Create a organization object
corp = Organization("Sabu Pharmaceutical Organization")

#Create some pharmacy objects
pharmacy1 = Pharmacy("Capitol Hill Pharmacy")
pharmacy2 = Pharmacy("Caton Hill Pharmacy")
pharmacy3 = Pharmacy("Largo Pharmacy")

#Add patients to each pharmacy
for name in names:
    pharmacy1.add_patient(Patient(name))
    pharmacy2.add_patient(Patient(name))
    pharmacy3.add_patient(Patient(name))


#Add phamarcies to the organization
corp.add_pharmacy(pharmacy1)
corp.add_pharmacy(pharmacy2)
corp.add_pharmacy(pharmacy3)

#Create an analytics object
analytic = Analytics()

# Generate weekly sales data for each week in 2024
start_date = datetime(2024, 1, 1)
end_date = datetime(2024, 12, 31)
current_date = start_date

while current_date <= end_date:
  weekly_totals_per_store = [] #Moved it inside the loop, to do once per file
  week_date = current_date.strftime('%B-%d-%Y')
  current_date += timedelta(days=7)  #Move to the next week

  corp.simulate()
  corp.display_analytics()
  analytic.add_analytics(corp.get_analytics())
  analytic.make_csv()
  corp.analytics.clear() #Clear out analytics each week
  corp.reset_all_pharmacy_sales()  #Reset total sales for each pharmacy



"""### Summarize all CSV files into a Single DataFrame
This section aggregates weekly sales data from multiple CSV files into a single DataFrame for comprehensive analysis.

1. **Import Libraries**: Import the `os` and `pandas` libraries.
2. **Get Current Directory**: Retrieve and print the current working directory.
3. **List CSV Files**: List and print all CSV files in the directory.
4. **Initialize Sales Data List**: Create an empty list to hold sales data from all CSV files.
5. **Read and Aggregate CSV Files**:
   - Read each CSV file into a DataFrame.
   - Extract the week name from the filename.
   - Append each row's data to the master list, adding the week name.
6. **Create and Print DataFrame**: Convert the master list into a DataFrame and print it.
"""

#Summarize all CSV files into a single DataFrame

import os

#Get the current directory (where the Colab notebook is running)
current_directory = os.getcwd()
print(current_directory)

#List all files in the current directory
all_files = os.listdir(current_directory)

#Filter only the CSV files
csv_files = [file for file in all_files if file.endswith('.csv')]

print(csv_files)

#Initialize the master list for all sales data
all_stores_all_weekly_sales = []  #Global list to hold data from all CSV files

#Read each CSV file, extract rows, and append to the master list
for filename in csv_files:
    df = pd.read_csv(filename)
    week_name = filename.replace('.csv', '')  #Extract week name from filename
    for _, row in df.iterrows():
        row_dict = row.to_dict()
        row_dict['week'] = week_name  #Add the week name to each row's data
        all_stores_all_weekly_sales.append(row_dict)

#Print the first few rows from the master list
print(all_stores_all_weekly_sales)

#Create a DataFrame from the list
df = pd.DataFrame(all_stores_all_weekly_sales)

#Print the DataFrame
print(df)

"""### Visualize Sales Data with Altair
This section creates an interactive line chart using Altair to visualize weekly total sales data for each pharmacy.

1. **Set Chart Dimensions**: Define the chart's width and height.
2. **Create Base Line Chart**:
   - Use `df` DataFrame for the chart data.
   - Encode the x-axis with 'week' (temporal), y-axis with 'total_sales' (quantitative), and differentiate lines by 'Name' (nominal).
   - Add tooltips to display 'Name', 'total_sales', and 'week' on hover.
3. **Enable Interaction**: Make the chart interactive.
4. **Display the Chart**: Render the chart.
"""

#Assuming 'df' is your DataFrame with the 'Name', 'total_sales', and 'week' columns

#Define the width and height for the chart
width = 800  #Set the width to be twice of a typical value (e.g., 400)
height = 300  #Set the height

#Create a base line chart with specified width and height
base = alt.Chart(df, width=width, height=height).mark_line().encode(
    x='week:T',  #Encode the x-axis with the 'week' column as temporal data
    y='total_sales:Q',  #Encode the y-axis with the 'total_sales' column as quantitative data
    color='Name:N',  #Use the 'Name' column to differentiate lines by color (nominal data)
    tooltip=['Name:N', 'total_sales:Q', 'week:T']  #Add tooltips to show 'Name', 'total_sales', and 'week' on hover
).interactive()  #Enable interaction with the chart

# Display the chart
base

"""### Calculate Descriptive Statistics and Variance
This section computes descriptive statistics and variance for total sales, grouped by each pharmacy.

1. **Group by Pharmacy Name**: Group the DataFrame by 'Name' and calculate descriptive statistics for 'total_sales'.
2. **Calculate Variance**: Compute the variance of 'total_sales' for each pharmacy and rename the resulting Series.
3. **Combine Statistics and Variance**: Merge the descriptive statistics and variance into a single DataFrame.
4. **Print the Combined DataFrame**: Display the DataFrame with statistics and variance for each pharmacy.

"""

#Group the DataFrame by 'Name' and calculate descriptive statistics for 'total_sales'
grouped_stats = df.groupby('Name')['total_sales'].describe()

#Calculate the variance for 'total_sales' for each store and rename the resulting Series
grouped_variance = df.groupby('Name')['total_sales'].var().rename("variance")

#Combine the descriptive statistics and variance into single DataFrame
stats_with_variance = pd.concat([grouped_stats, grouped_variance], axis=1)

#Print the combined DataFrame containing statistics and variance for each store
print(stats_with_variance)

"""### Rank Stores by Variance in Total Sales
This section ranks stores based on the variance in total sales, assuming 'df' is the DataFrame with 'name', 'total_sales', and 'week' columns.

1. **Calculate Variance and Rank**: Compute the variance of 'total_sales' for each store and rank the stores in descending order based on variance.
2. **Print the Ranked Stores**: Display the stores ranked by variance in total sales.
"""

#Assuming 'df' is your DataFrame with the 'name', 'total_sales', and 'week' columns


#Rank the stores by their variance in 'total_sales' in descending order
ranked_stores = grouped_variance.sort_values(ascending=False)

# Print the ranked stores based on variance
print(ranked_stores)

"""### Visualize Store Ranking with Variance Histogram
This section creates a bar chart (histogram) to visualize the variance of total sales for each store, assuming 'ranked_stores' is a Pandas Series with store names as the index and variance as the values.

1. **Convert Series to DataFrame**: Convert the 'ranked_stores' Series to a DataFrame suitable for use with Altair.
2. **Define Color Scale**: Define the color scale with a midpoint for the variance values.
3. **Create Bar Chart**: Use Altair to create a bar chart (histogram) to display store ranking based on variance of total sales.
4. **Display the Histogram**: Render the histogram chart.
"""

#Assuming 'ranked_stores' is a Pandas Series with the store names as the index and variance as the values

#Convert the 'ranked_stores' Series to a DataFrame for use with Altair
data = ranked_stores.reset_index()
data.columns = ['Name', 'variance']

#Define the color scale with a midpoint for the variance values
color_scale = alt.Scale(scheme='redblue', domainMid=0)

#Create a bar chart (histogram) to visualize the variance of total sales for each store
histogram = alt.Chart(data).mark_bar().encode(
    x='Name:N',  #Nominal data type for store names on the x-axis
    y='variance:Q',  #Quantitative data type for variance on the y-axis
    color=alt.Color('variance:Q', scale=color_scale, legend=None),  #Color bars based on variance
    tooltip=['Name:N', 'variance:Q']  #Tooltips to display store names and variance
).properties(
    width=800  #Set the width of the chart
)

# Display the histogram
histogram